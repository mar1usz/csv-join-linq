<#@ include file="$(ProjectDir)TextTemplates.Utilities\CsvUtilities.ttinclude" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Memory" #>
<#@ assembly name="System.Text.Json" #>
<#@ assembly name="netstandard" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text.Json" #>
<#+
    IList<Table> LoadTables(ITextTemplatingEngineHost host)
    {
        string projectDir = host.ResolveAssemblyReference("$(ProjectDir)");
        string launchSettingsPath = Path.Combine(
            projectDir,
            "Properties",
            "launchSettings.json");

        using var launchSettingsStream = File.OpenRead(launchSettingsPath);
        string[] args = JsonDocument.Parse(launchSettingsStream)
            .RootElement
            .GetProperty("profiles")
            .GetProperty("CsvJoin")
            .GetProperty("commandLineArgs")
            .GetString()
            .Split();

        string directory = args.First();
        string[] fileNames = args.Skip(1).Take(2).ToArray();

        var result = new List<Table>{ };
        for (int i = 0; i < 2; i++)
        {
            result.Add(new Table
            {
                Name = $"csv{i + 1}",
                Columns = CsvUtilities
                    .ReadHeader(
                        Host,
                        directory,
                        fileNames[i])
                    .Select(x => new Column { Name = x })
                    .ToArray()
            });
        }
        return result;
    }

    class Table
    {
        public string Name { get; set; }
        public Column[] Columns { get; set; }
    }

    class Column : IEquatable<Column>
    {
        public string Name { get; set; }

        public bool Equals(Column other) =>
            other != null && Name == other.Name;
        public override bool Equals(object obj) =>
            Equals(obj as Column);
        public override int GetHashCode() =>
            Name.GetHashCode();
    }
#>
