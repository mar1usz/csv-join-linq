<#@ include file="$(ProjectDir)TextTemplates.Utilities\CsvUtilities.ttinclude" #>
<#@ assembly name="System.Memory" #>
<#@ assembly name="System.Text.Json" #>
<#@ assembly name="netstandard" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text.Json" #>
<#+
    private const string LaunchSettingsDirectory = "Properties";
    private const string LaunchSettingsFileName = "launchSettings.json";

    IEnumerable<Table> LoadTables(ITextTemplatingEngineHost host)
    {
        string projectDirectory = host
            .ResolveAssemblyReference(MsBuildMacros.ProjectDirectory);

        string launchSettingsPath = Path.Combine(
            projectDirectory,
            LaunchSettingsDirectory,
            LaunchSettingsFileName);

        using var launchSettingsStream = File.OpenRead(launchSettingsPath);
        using var launchSettings = JsonDocument.Parse(launchSettingsStream);

        string[] args = launchSettings.RootElement
            .GetProperty("profiles")
            .GetProperty("CsvJoin")
            .GetProperty("commandLineArgs")
            .GetString()
            .Split();

        if (args.Length < 3)
        {
            throw new ArgumentException("commandLineArgs");
        }

        string directory = args.First();
        string[] fileNames = args.Skip(1).Take(2).ToArray();

        var tables = new List<Table> { };
        for (int i = 0; i < 2; i++)
        {
            tables.Add(new Table
            {
                Name = $"csv{i + 1}",
                Columns = CsvUtilities.ReadHeader(
                        Host, directory, fileNames[i])
                    .Select(f => new Column { Name = f })
            });
        }
        return tables;
    }

    class Table
    {
        public string Name { get; set; }
        public IEnumerable<Column> Columns { get; set; }

        public bool ContainsColumn(Column column) =>
            Columns.Contains(column);
    }

    class Column : IEquatable<Column>
    {
        public string Name { get; set; }

        public bool Equals(Column other) =>
            other != null && Name == other.Name;

        public override bool Equals(object obj) =>
            Equals(obj as Column);

        public override int GetHashCode() =>
            Name.GetHashCode();
    }
#>
