<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ output extension=".cs" #>
<#
    string[] tables = new string[]{ "csv1", "csv2" };
    string[][] columns = new string[][]{ new string[]{"Customer","Product","Price","Quantity"}, new string[]{"Customer","Product","Quantity","Cost"} };

    string[] commonColumns = columns[0].Intersect(columns[1]).ToArray();
    string[] joinedColumns = columns[0].Union(columns[1]).ToArray();
#>
// <auto-generated />
using CsvJoin.Models;
using CsvJoin.Services.Abstractions;
using System.Collections.Generic;
using System.Linq;

namespace CsvJoin.Services
{
    public class LinqPreparator : ILinqPreparator
    {
        public IEnumerable<dynamic> PrepareLeftJoinLinq(
            IEnumerable<Csv1> csv1s,
            IEnumerable<Csv2> csv2s)
        {
            return from csv1 in csv1s
                   join csv2 in csv2s
                   on new
                   {
<#
	foreach (string commonColumn in commonColumns)
	{
#>
                       <#= string.Format("{0}.{1}",
                               tables[0],
                               commonColumn) #>,
<#
	}
#>
                   }
                   equals new
                   {
<#
	foreach (string commonColumn in commonColumns)
	{
#>
                       <#= string.Format("{0}.{1}",
                               tables[1],
                               commonColumn) #>,
<#
	}
#>
                   }
                   into gj
                   from csv2 in gj.DefaultIfEmpty()
                   select new
                   {
<#
	foreach (string joinedColumn in joinedColumns)
	{
#>
                       <#= string.Format("{0}.{1}",
                               columns[0].Contains(joinedColumn) ? tables[0]
                                   : tables[1] + '?',
                               joinedColumn) #>,
<#
	}
#>
                   };
        }

        public IEnumerable<dynamic> PrepareJoinLinq(
            IEnumerable<Csv1> csv1s,
            IEnumerable<Csv2> csv2s)
        {
            return from csv1 in csv1s
                   join csv2 in csv2s
                   on new
                   {
<#
	foreach (string commonColumn in commonColumns)
	{
#>
                       <#= string.Format("{0}.{1}",
                               tables[0],
                               commonColumn) #>,
<#
	}
#>
                   }
                   equals new
                   {
<#
	foreach (string commonColumn in commonColumns)
	{
#>
                       <#= string.Format("{0}.{1}",
                               tables[1],
                               commonColumn) #>,
<#
	}
#>
                   }
                   select new
                   {
<#
	foreach (string joinedColumn in joinedColumns)
	{
#>
                       <#= string.Format("{0}.{1}",
                               columns[0].Contains(joinedColumn) ? tables[0]
                                   : tables[1],
                               joinedColumn) #>,
<#
	}
#>
                   };
        }
    }
}
